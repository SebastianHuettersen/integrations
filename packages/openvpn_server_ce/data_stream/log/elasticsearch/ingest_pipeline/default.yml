---
description: Pipeline for processing sample logs
processors:
    - set:
        field: ecs.version
        value: '8.11.0'
    
    - rename:
        if: ctx.event?.original == null
        field: message
        target_field: event.original
        ignore_missing: true

    - remove:
        if: ctx.event?.original != null
        field: message
        ignore_missing: true

    # Journald input field cleanup.
    - remove:
        field:
            - syslog.priority
            - syslog.facility
        ignore_missing: true
    - rename:
        field: syslog.pid
        target_field: log.syslog.procid
        ignore_missing: true
    - rename:
        field: syslog.identifier
        target_field: log.syslog.appname
        ignore_missing: true
    - remove:
        description: Cleanup an empty syslog object.
        if: ctx?.syslog != null && ctx.syslog instanceof Map && ctx.syslog.isEmpty()
        field: syslog

    # Parse the header if it is syslog, otherwise treat the whole value as 'message'.
    - grok:
        description: Grok the message header.
        tag: grok-message-header
        field: event.original
        pattern_definitions:
            TIMESTAMP: (?:%{TIMESTAMP_ISO8601}|%{SYSLOGTIMESTAMP})
            SOURCE: '%{IP:source.address}:%{NONNEGINT:source.port:long}'  
        patterns:
            - '^%{TIMESTAMP:_tmp.timestamp} %{DATA:user.name}/%{SOURCE} %{GREEDYDATA:message}$'
            - '^%{TIMESTAMP:_tmp.timestamp} %{SOURCE} %{GREEDYDATA:message}$'
            - '^%{TIMESTAMP:_tmp.timestamp} %{GREEDYDATA:message}$'
        on_failure:
            - set:
                field: message
                copy_from: event.original

    - grok:
        description: Grok for extraction event type name.
        tag: grok-specific-messages
        field: message
        ignore_missing: true
        ignore_failure: true
        pattern_definitions:
            EVENTACTION: '([^:]+)'
            SIGNAL: 'SIGTERM|SIGUSR1'
            CONINIT: 'Peer Connection Initiated'
        patterns:
            - '^%{EVENTACTION:openvpn.event.type.name}: %{GREEDYDATA:_tmp.event.message}$'
            - '^%{SIGNAL:openvpn.event.type.name}\[%{WORD},%{DATA:openvpn.exit.code}\]'
            - '^\[%{DATA}\] %{CONINIT:openvpn.event.type.name}'

    - grok:
        description: Grok specific openvpn peer_info messages.
        tag: grok-specific-messages
        field: _tmp.event.message
        ignore_missing: true
        patterns:
            - '^IV_VER=%{GREEDYDATA:openvpn.client.version}'
            - '^IV_GUI_VER=%{GREEDYDATA:openvpn.client.gui.version}'
            - '^IV_PLAT=%{GREEDYDATA:openvpn.client.os.platform}'
            - '^IV_PLAT_VER=%{GREEDYDATA:openvpn.client.os.version}'
            - '^IV_TCPNL=%{GREEDYDATA:openvpn.client.tcp_nonlinear_mode}'
            - '^IV_MTU=%{GREEDYDATA:openvpn.client.mtu}'
            - '^IV_CIPHERS=%{GREEDYDATA:openvpn.client.ciphers}'
            - '^IV_PROTO=%{GREEDYDATA:openvpn.client.protocol_extensions}'
            - '^IV_LZO_STUB=%{GREEDYDATA:openvpn.client.lzo}'
            - '^IV_LZ4=%{GREEDYDATA:openvpn.client.lz4}'
            - '^IV_SSO=%{GREEDYDATA:openvpn.client.sso}'
            - '^IV_HWADDR=%{GREEDYDATA:openvpn.client.id}'
            - '^IV_SSL=%{GREEDYDATA:openvpn.client.ssl.version}'
        if: ctx.openvpn?.event?.type?.name != null && ['peer info'].contains(ctx.openvpn.event.type.name) 
        on_failure:
            - rename:
                description: We do not know the Key therfore leave content unmatched.
                field: _tmp.event.message
                target_field: openvpn.client.peer_info

    - grok:
        description: Grok specific openvpn chiper messages.
        tag: grok-specific-messages
        field: _tmp.event.message
        ignore_missing: true
        patterns:
            - "^Cipher '%{GREEDYDATA:openvpn.cipher}' initialized with %{INT} bit key"
            - "^Using %{INT} bit message hash '%{GREEDYDATA:openvpn.hash}' for HMAC authentication"
        if: ctx.openvpn?.event?.type?.name != null && ['Outgoing Data Channel', 'Outgoing Control Channel Encryption', 'Incoming Data Channel', 'Incoming Control Channel Encryption'].contains(ctx.openvpn.event.type.name)


    - grok:
        description: Grok specific openvpn chiper messages.
        tag: grok-specific-messages
        field: _tmp.event.message
        ignore_missing: true
        patterns:
            - "^TLSv%{GREEDYDATA}, cipher TLSv%{GREEDYDATA:tls.version} %{GREEDYDATA:tls.cipher}, %{GREEDYDATA}, curve: %{GREEDYDATA:tls.curve}"
        if: ctx.openvpn?.event?.type?.name != null && ['Control Channel'].contains(ctx.openvpn.event.type.name)


    - grok:
        description: Grok specific openvpn client control messages.
        field: _tmp.event.message
        tag: grok-specific-messages
        ignore_missing: true
        patterns:
            - "^'%{GREEDYDATA:openvpn.client.control.config}' \\(status=%{INT:openvpn.client.control.status}\\)$"
        if: ctx.openvpn?.event?.type?.name != null && ctx.openvpn.event.type.name.contains('SENT CONTROL')


    - grok:
        description: Grok specific openvpn TLS messages.
        field: _tmp.event.message
        tag: grok-specific-messages
        ignore_missing: true
        ignore_failure: true
        pattern_definitions:
            SOURCE: '%{IP:source.address}:%{NONNEGINT:source.port:long}'
        patterns:
            - "^Initial packet from \\[AF_INET\\]%{SOURCE}, sid=%{BASE16NUM:openvpn.client.session.id}"
            - '\[%{NOTSPACE}\]%{SOURCE}$'
        if: ctx.openvpn?.event?.type?.name != null && ctx.openvpn.event.type.name.contains('TLS')

    - grok:
        description: Grok specific openvpn verify messages.
        field: _tmp.event.message
        tag: grok-specific-messages
        ignore_missing: true
        patterns:
            - "^depth=%{INT},%{DATA} (emailAddress=%{EMAILADDRESS},)?CN=%{DATA:user.name}(, O=%{DATA})?$"
        if: ctx.openvpn?.event?.type?.name != null && ctx.openvpn.event.type.name.contains('VERIFY')


    - grok:
        description: Grok specific openvpn multi messages.
        field: _tmp.event.message
        tag: grok-specific-messages
        ignore_missing: true
        ignore_failure: true
        pattern_definitions:
            SOURCE: '%{IP:source.address}:%{NONNEGINT:source.port:long}'
        patterns:
            - '^pool returned IPv4=(%{IP:source.nat.ip}|%{GREEDYDATA}),%{SPACE}IPv6=(%{IP:source.nat.ip}|%{GREEDYDATA})'
            - '^Learn: %{IP:source.nat.ip} -> %{DATA:user.name}/%{SOURCE}'
            - '^primary virtual IP for %{DATA:user.name}/%{SOURCE}: %{IP:source.nat.ip}'
            - '^multi_init called, r=%{INT} v=%{INT}$'
        if: ctx.openvpn?.event?.type?.name != null && ctx.openvpn.event.type.name.contains('MULTI')

    - grok:
        description: Grok specific openvpn network configuration messages.
        field: _tmp.event.message
        tag: grok-specific-messages
        ignore_missing: true
        ignore_failure: true
        pattern_definitions:
            INTERFACE_STATUS: 'up|down'
        patterns:
            - '^mtu %{GREEDYDATA:openvpn.server.mtu} for %{WORD:interface.name}$'
            - '^set %{WORD:interface.name} %{INTERFACE_STATUS}$'
            - '^via %{IP:openvpn.server.gateway} dev %{WORD:interface.name}$'
            - '^%{IP}/%{INT} dev %{WORD:interface.name}$'
        if: ctx.openvpn?.event?.type?.name != null && ctx.openvpn.event.type.name.contains('net_')

    - date:
        if: ctx.event?.timezone == null && ctx._tmp?.timestamp != null
        field: _tmp.timestamp
        target_field: '@timestamp'
        formats:
            - yyyy-MM-dd HH:mm:ss
            - MMM  d HH:mm:ss
            - MMM dd HH:mm:ss
            - ISO8601
        on_failure:
            - append:
                field: error.message
                value: '{{{ _ingest.on_failure_message }}}'

    - date:
        if: ctx.event?.timezone != null && ctx._tmp?.timestamp != null
        field: _tmp.timestamp
        target_field: '@timestamp'
        formats:
            - yyyy-MM-dd HH:mm:ss
            - MMM  d HH:mm:ss
            - MMM dd HH:mm:ss
            - ISO8601
        timezone: '{{{ event.timezone }}}'
        on_failure:
            - append:
                field: error.message
                value: '{{{ _ingest.on_failure_message }}}'

    - set:
        field: source.ip
        value: "{{source.address}}"
        ignore_empty_value: true

    - geoip:
        field: source.ip
        target_field: source.geo
        ignore_missing: true

    - geoip:
        database_file: GeoLite2-ASN.mmdb
        field: source.ip
        target_field: source.as
        properties:
            - asn
            - organization_name
        ignore_missing: true

    - rename:
        field: source.as.asn
        target_field: source.as.number
        ignore_missing: true

    - rename:
        field: source.as.organization_name
        target_field: source.as.organization.name
        ignore_missing: true

    - set:
        field: source.ip
        value: "{{source.address}}"
        ignore_empty_value: true

    - set:
        field: openvpn.event.type.name
        value: "SENT CONTROL"
        if: ctx.openvpn?.event?.type?.name != null && ctx.openvpn.event.type.name.contains('SENT CONTROL')

    - script:
        lang: painless
        ignore_failure: false
        description: Set event category, type, outcome and type name.
        params:
            'VERIFY OK':
                category:
                    - iam
                    - authentication
                type:
                    - user
                    - info
                outcome: success
            'VERIFY ERROR':
                category:
                    - authentication
                type:
                    - info
                outcome: failure  
            'Peer Connection Initiated':
                category:
                    - authentication
                    - session
                type:
                    - start
                outcome: success
            'SIGUSR1':
                category:
                    - session
                    - authentication
                type:
                    - end
                outcome: failure
            'SIGTERM':
                category:
                    - session
                type:
                    - end
                outcome: success
            'net_route_v4_best_gw result':
                category:
                    - configuration
                    - network
                type:
                    - creation
                    - info
                outcome: success
            'net_iface_up':
                category:
                    - network
                type:
                    - info
                outcome: success
            'net_addr_v4_add':
                category:
                    - network
                type:
                    - info
                outcome: success
            'IFCONFIG POOL IPv4':
                category:
                    - network
                type:
                    - info
                outcome: success
            'peer info':
                category:
                    - configuration
                type:
                    - info
                outcome: success
            'Control Channel':
                category:
                    - configuration
                type:
                    - info
                outcome: success
            'Outgoing Data Channel':
                category:
                    - configuration
                type:
                    - info
                outcome: success
            'Incoming Data Channel':
                category:
                    - configuration
                type:
                    - info
                outcome: success
            'SENT CONTROL':
                category:
                    - configuration
                type:
                    - creation
                outcome: success
        source: |-
            if (ctx.openvpn?.event?.type?.name == null || params.get(ctx.openvpn.event.type.name) == null) {
                return;
            }
            def hm = new HashMap(params.get(ctx.openvpn.event.type.name));
            ctx.event.category = hm.category;
            ctx.event.type = hm.type;
            ctx.event.outcome = hm.outcome;    

    - set:
        field: event.kind
        value: event

    - remove:
        field:
            - _tmp
        ignore_failure: true
        ignore_missing: true

    - remove:
        field: event.original
        if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
        ignore_failure: true
        ignore_missing: true

on_failure:
    - set:
        field: event.kind
        value: pipeline_error
    - set:
        field: error.message
        value: '{{ _ingest.on_failure_message }}'
